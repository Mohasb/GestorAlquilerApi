public async Task<ActionResult<ReservationDTO>> AddElement(ReservationDTO reservationDTO)
        {
            if (_reservations == null)
            {
                return Problem("Entity set 'ApiContext.Reservation'  is null.");
            }

            var reservation = _mapper.Map<Reservation>(reservationDTO);

            //Validate DTO
            var valuesAsArray = Enum.GetNames(typeof(Car.Categories));
            if (!valuesAsArray.Contains(reservation.CarCategory))
            {
                return BadRequest(
                    $"Category '{reservation.CarCategory}' is invalid. It has to be in: {string.Join(", ", valuesAsArray.SkipLast(1))} or {valuesAsArray[^1]}"
                );
            }
            //Validate branchId
            else if (await _branches.FindAsync(reservation.BranchId) == null)
            {
                return BadRequest($"there is no branch with id = {reservation.BranchId}");
            }
            //Validate clientId
            else if (await _clients.FindAsync(reservation.ClientId) == null)
            {
                return BadRequest($"there is no customer with id = {reservation.ClientId}");
            }
            //Validate Dates
            else if (reservation.StartDate < DateTime.Now)
            {
                return BadRequest($"The StartDate must be greater than {DateTime.Now}.");
            }
            else if (reservation.StartDate > reservation.EndDate)
            {
                return BadRequest($"The End Date must be greater than Start Date.");
            }
            else if (reservation.EndDate < reservation.StartDate)
            {
                return BadRequest($"The End Date must be greater than start Date.");
            }
            else
            {
                if (AreCarsAvailables(reservation))
                {
                    try
                    {
                        RemoveCarFromAvailable(reservation);
                        _repository.AddReservation(reservation);
                        await _saveData.SaveChangesAsync();
                        return reservationDTO;
                    }
                    catch
                    {
                        return Problem("problem in adding reservation");
                    }
                }
                else
                {
                    return BadRequest("There are no available cars");
                }
            }
        }











        private async void RemoveCarFromAvailable(Reservation reservation)
        {
             var planning = _repository.GetReservationData(reservation);
             
            foreach (var day in planning)
            {
                day.CarsAvailables--;
            }
            await _saveData.SaveChangesAsync(); 
        }

        private bool AreCarsAvailables(Reservation reservation)
        {
            return _repository.CheckAvailabilityCars(reservation);
        }



        public bool CheckAvailabilityCars(Reservation reservation)
        {
            //get data of reservation
            var data =
                from p in _context.Planning
                where
                    p.BranchId == reservation.BranchId
                    && p.CarCategory == reservation.CarCategory
                    && p.Day >= reservation.StartDate.Date
                    && p.Day <= reservation.EndDate.Date
                select p;
            var count = data.Count();
            //If are cars availables in all the days...
            
            bool all = data.All(p => p.CarsAvailables > 0);
            return all;
        }
        public IQueryable<Planning> GetReservationData(Reservation reservation)
        {
            var data = from p in _context.Planning
                where
                    p.BranchId == reservation.BranchId
                    && p.CarCategory == reservation.CarCategory
                    && p.Day >= reservation.StartDate.Date
                    && p.Day <= reservation.EndDate.Date
                select p;
                return data;
        }